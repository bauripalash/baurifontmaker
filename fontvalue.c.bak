#include "include/fontvalue.h"
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

FontValue *NewFontValue() {
    FontValue *fv = (FontValue *)calloc(1, sizeof(FontValue));
    return fv;
}

void FreeFontValue(FontValue *fv) { free(fv); }

uint8_t FlipFontValue(FontValue *fv, uint8_t col, uint8_t row) {
	// TODO: Check position
    uint8_t val = fv->bits[row];
    fv->bits[row] = val ^ (1 << (7 - col));
    return val;
}

bool GetBoolFontValue(FontValue *fv, uint8_t col, uint8_t row) {
    if (row >= 8 || col >= 8) {
        return false;
    }

    uint8_t bts = fv->bits[row];
    uint8_t val = (bts >> (7 - col)) & 1;

    return val == 1;
}

uint8_t * GetFlippedIndexes(FontValue *fv, int * length){
	uint8_t * result = (uint8_t*)calloc(64, sizeof(uint8_t));

	*length = 0;

	if (result == NULL) {
		return NULL;
	}

	for (int row = 0; row < 8; row++) {
		for (int col = 0; col < 8; col++) {

			if (GetBoolFontValue(fv, col, row)) {
				result[*length] = row * 8 + col;
				(*length)++;
			}

		}
	}

	return result;
	



}

void LogFontValue(FontValue *fv) {
    printf("[ ");
    for (int i = 0; i < 8; i++) {
        printf("0x%X, ", fv->bits[i]);
    }
    printf(" ]\n");
}

void LogBinaryFontValue(FontValue * fv) {
	printf("[ ");
	for (int i = 0; i < 8; i++) {

		for (int b = 7; b >= 0; b--) {
			printf("%d", (fv->bits[i] >> b) & 1);
		}

		printf(", ");
	
	}

	printf(" ]\n");
}
